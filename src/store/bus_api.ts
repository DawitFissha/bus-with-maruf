import {createApi,fetchBaseQuery} from "@reduxjs/toolkit/query/react"

export const busApi=createApi({
    reducerPath:"userApi",
    tagTypes:["User","City","Bus","Route","Schedule"],
    baseQuery:fetchBaseQuery({
        baseUrl:"http://localhost:7000",
        credentials: "include",
    }),
        endpoints:(builder)=>({
            //auth
        checkSession:builder.query<any,any>({
            query:()=>'/checkauth',
            providesTags:["User","Bus"]
        }),
        loginUser:builder.mutation<any,any>({
            query:user=>({
                url:'/loginorganizationuser',
                method:"POST",
                body:user,
            }),
            invalidatesTags:["User"]
        }),
        changePassword:builder.mutation<any,any>({
            query:password=>({
                url:'/changepassword',
                method:"PUT",
                body:password,
            }),
            invalidatesTags:["User"]
        }),
        //organization
        getOrganizationByCode:builder.query<any,any>({
            query:data=>`/getorganizationbycode/${data.code}`,
            providesTags:["User","Bus"]
        }),
            //user
        getUser:builder.query<any,any>({
            query:()=>'/getallorganizationuser',
            providesTags:["User","Bus"]
        }),
        getUserByRole:builder.query<any,any>({
            query:role=>`/getuserbyrole?role=${role}`,
            providesTags:["User"]
        }),
        getAssignedUserByRole:builder.query<any,any>({
            query:role=>`/getassigneduserbyrole?role=${role}`,
            providesTags:["User","Bus"]
        }),
        getAssignedUserByRoleWithedit:builder.query<any,any>({
            query:data=>`/getuserwithedit?role=${data.role}&current=${data.current}`,
            providesTags:["User"]
        }),
        updateUser:builder.mutation<any,any>({
            query:user=>({
                url:`/updateorganizationuser/${user.id}`,
                method:"PUT",
                body:user,
            }),
            invalidatesTags:["User"]
        }),
        resetPassword:builder.mutation<any,any>({
            query:data=>({
                url:`/resetpassword/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["User"]
        }),
        //city
        getCity:builder.query<any,any>({
            query:()=>'/getallorganizationcity',
            providesTags:["City"]
        }),
        getAllCity:builder.query<any,any>({
            query:()=>'/getcityonly',
            providesTags:["City"]
        }),
        getAllDepPlace: builder.query({
            query:(param:any) => { // Why is 'end' always undefined???
              return {
                url: '/getalldepartureplace',
                params:param,
              };
            },
            providesTags:["Bus"],
          }),
        addCity:builder.mutation<any,any>({
            query:city=>({
                url:`/registercity`,
                method:"POST",
                body:city,
            }),
            invalidatesTags:["City"]
        }),
        updateCity:builder.mutation<any,any>({
            query:data=>({
                url:`/updatecityinfo/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["City"]
        }),
        //bus
        getBus:builder.query<any,any>({
            query:()=>'/getdetailorganizationbus',
            providesTags:["Bus","User"]
        }),
        getBusById:builder.query<any,any>({
            query:id=>`/getbusbyid${id}`,
            providesTags:["Bus"]
        }),
        getActiveBus:builder.query<any,any>({
            query:()=>'/getorganizationactivebus',
            providesTags:["Bus"]
        }),
        getAllOrgBus:builder.query<any,any>({
            query:()=>'/getallorganizationbus',
            providesTags:["Bus"]
        }),
        getActiveBusInRoute: builder.query({
            query:(param:any)=> { // Why is 'end' always undefined???
              return {
                url: '/getorganizationfreebusbydateinroute',
                params:param,
              };
            },
            providesTags:["Bus"],
          }),
        updateBus:builder.mutation<any,any>({
            query:data=>({
                url:`/updatebusinfo/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["Bus"]
        }),
        updateBusw:builder.mutation<any,any>({
            query:data=>({
                url:`/updatebusinfo/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["Bus"]
        }),
        //route
        getRoute:builder.query<any,any>({
            query:()=>'/getorganizationdetailroute',
            providesTags:["Route"]
        }),
        getRouteDepPlace: builder.query({
            query:(param:any)=> { // Why is 'end' always undefined???
              return {
                url: '/getroutedepplace',
                params:param,
              };
            },
            providesTags:["Bus"],
          }),
       
        updateRoute:builder.mutation<any,any>({
            query:data=>({
                url:`/updaterouteinfo/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["Route"]
        }),
        updateRouteBusAndPlace:builder.mutation<any,any>({
            query:data=>({
                url:`/updateroutebusandplace/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["Route"]
        }),
        deleteRoute:builder.mutation<any,any>({
            query:data=>({
                url:`/deleteroute/${data.id}`,
                method:"DELETE",
            }),
            invalidatesTags:["Route"]
        }),
        //schedule
        getSchedule:builder.query<any,any>({
            query:()=>'/getdetailschedule',
            providesTags:["Schedule"]
        }),
        getSalesSchedule:builder.query<any,any>({
            query:()=>'/getallfilterschedule',
            providesTags:["Schedule"]
        }),
        getOrgRule:builder.query<any,any>({
            query:()=>'/getmyorgrules',
            providesTags:["Schedule"]
        }),
        getOneSchedule:builder.query<any,any>({
            query:id=>`/getschedulebyid/${id}`,
            providesTags:["Schedule"]
        }),
        updateDepartureDateTime:builder.mutation<any,any>({
            query:data=>({
                url:`updatedeparturedatetime/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["Schedule"]
        }),
        updatePassInfo:builder.mutation<any,any>({
            query:data=>({
                url:`updatepassinfo/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["Schedule"]
        }),
        refundTicket:builder.mutation<any,any>({
            query:data=>({
                url:`refundrequest/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["Schedule"]
        }),
        updateScheduleBusAndPlace:builder.mutation<any,any>({
            query:data=>({
                url:`assignbustoschedule/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["Schedule"]
        }),
        cancelShcedule:builder.mutation<any,any>({
            query:data=>({
                url:`cancelschedule/${data.id}`,
                method:"PUT",
                body:data,
            }),
            invalidatesTags:["Schedule"]
        }),
        
   }),
})

export const {
    //auth
    useLoginUserMutation,
    useChangePasswordMutation,
    useCheckSessionQuery,
    //organization
    useGetOrganizationByCodeQuery,
    //user
    useGetUserQuery,
    useUpdateUserMutation,
    useResetPasswordMutation,
    useGetAssignedUserByRoleQuery,
    useGetUserByRoleQuery,
    useGetAssignedUserByRoleWitheditQuery,
    //city
    useGetCityQuery,
    useGetAllCityQuery,
    useAddCityMutation,
    useUpdateCityMutation,
    useGetAllDepPlaceQuery,
    //bus
    useGetBusQuery,
    useGetBusByIdQuery,
    useUpdateBusMutation,
    useUpdateBuswMutation,
    useGetActiveBusInRouteQuery,
    useGetActiveBusQuery,
    useGetAllOrgBusQuery,
    //route
    useDeleteRouteMutation,
    useGetRouteQuery,
    useGetRouteDepPlaceQuery,
    useUpdateRouteBusAndPlaceMutation,
    useUpdateRouteMutation,
    //schedule
    useCancelShceduleMutation,
    useGetOneScheduleQuery,
    useLazyGetOneScheduleQuery,
    useGetOrgRuleQuery,
    useGetSalesScheduleQuery,
    useGetScheduleQuery,
    useRefundTicketMutation,
    useUpdateDepartureDateTimeMutation,
    useUpdatePassInfoMutation,
    useUpdateScheduleBusAndPlaceMutation,
    

}=busApi